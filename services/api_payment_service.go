/*
 * OpenAPI blockchain services
 *
 * This is the OpenAPI definition of the blockchain services.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package services

import (
	"context"
	"ethereum-service/internal"
	"ethereum-service/internal/dbaccess"
	"ethereum-service/model"
	"ethereum-service/openApi"
	"fmt"
	"github.com/google/uuid"
	"math/big"
	"net/http"
)

// PaymentApiService is a service that implements the logic for the PaymentApiServicer
// This service should implement the business logic for every endpoint for the PaymentApi API.
// Include any external packages or services that will be required by this service.
type PaymentApiService struct {
}

// NewPaymentApiService creates a default api service
func NewPaymentApiService() openApi.PaymentApiServicer {
	return &PaymentApiService{}
}

// CreatePayment - create new payment
func (s *PaymentApiService) CreatePayment(ctx context.Context, paymentRequest openApi.PaymentRequest) (openApi.ImplResponse, error) {
	acc, err := internal.GetAccount()

	if err != nil {
		return openApi.Response(http.StatusInternalServerError, acc), fmt.Errorf("unable to get free address")
	}

	payment := model.Payment{
		Mode:          paymentRequest.Mode,
		AccountID:     acc.ID,
		PriceAmount:   paymentRequest.PriceAmount,
		PriceCurrency: paymentRequest.PriceCurrency,
		UserWallet:    paymentRequest.Wallet,
	}

	payment.ID = uuid.New()

	val := internal.GetETHAmount(payment)
	bigval := new(big.Float)
	bigval.SetFloat64(*val)
	balance := big.NewFloat(0).Mul(bigval, big.NewFloat(1000000000000000000))
	final, accur := balance.Int(nil)
	if accur == big.Below {
		final.Add(final, big.NewInt(1))
	}
	_, err = dbaccess.CreatePayment(&payment, final)

	finalPayAmount, _ := bigval.Float64()
	paymentResponse := openApi.PaymentResponse{
		//payment.ID.String(), //Todo change openapi
		PriceAmount:   payment.PriceAmount,
		PriceCurrency: payment.PriceCurrency,
		PayAddress:    payment.Account.Address,
		PayAmount:     finalPayAmount,
		PayCurrency:   "ETH",
		PaymentStatus: payment.CurrentPaymentState.StatusName,
	}
	return openApi.Response(http.StatusCreated, paymentResponse), nil
}
