/*
 * OpenAPI blockchain services
 *
 * This is the OpenAPI definition of the blockchain services.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package services

import (
	"context"
	"ethereum-service/database"
	"ethereum-service/internal"
	"ethereum-service/model"
	"ethereum-service/openApi"
	"ethereum-service/proxyClientApi"
	"fmt"
	"math/big"
	"net/http"
	"os"

	"github.com/google/uuid"
)

// PaymentApiService is a service that implements the logic for the PaymentApiServicer
// This service should implement the business logic for every endpoint for the PaymentApi API.
// Include any external packages or services that will be required by this service.
type PaymentApiService struct {
}

// NewPaymentApiService creates a default api service
func NewPaymentApiService() openApi.PaymentApiServicer {
	return &PaymentApiService{}
}

// CreatePayment - create new payment
func (s *PaymentApiService) CreatePayment(ctx context.Context, paymentRequest openApi.PaymentRequest) (openApi.ImplResponse, error) {
	acc, err := internal.GetAccount()

	if err != nil {
		return openApi.Response(http.StatusInternalServerError, acc), fmt.Errorf("unable to get free address")
	}

	payment := model.Payment{
		Mode:          paymentRequest.Mode,
		AccountID:     acc.ID,
		PriceAmount:   paymentRequest.PriceAmount,
		PriceCurrency: paymentRequest.PriceCurrency,
		UserWallet:    paymentRequest.Wallet,
	}

	payment.ID = uuid.New()

	// response from `GetPriceConversion`: PriceConversionResponseDto

	val := getETHAmount(payment)
	bigval := new(big.Float)
	bigval.SetFloat64(*val)
	balance := big.NewFloat(0).Mul(bigval, big.NewFloat(1000000000000000000))
	final, accur := balance.Int(nil)
	if accur == big.Below {
		final.Add(final, big.NewInt(1))
	}
	payment.AddNewPaymentState("waiting", big.NewInt(0), final)
	database.DB.Create(&payment)
	return openApi.Response(http.StatusCreated, paymentRequest), nil

	// TODO - update CreatePayment with the required logic for this service method.
	// Add api_payment_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, PaymentResponse{}) or use other options such as http.Ok ...
	//return Response(201, PaymentResponse{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil
}

func getETHAmount(payment model.Payment) *float64 {
	amount := fmt.Sprintf("%g", payment.PriceAmount)
	srcCurrency := payment.PriceCurrency
	dstCurrency := "ETH" // string |
	mode := "main"

	configuration := proxyClientApi.NewConfiguration()
	apiClient := proxyClientApi.NewAPIClient(configuration)
	resp, r, err := apiClient.ConversionApi.GetPriceConversion(context.Background()).Amount(amount).SrcCurrency(srcCurrency).DstCurrency(dstCurrency).Mode(mode).Execute()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error when calling `ConversionApi.GetPriceConversion``: %v\n", err)
		fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
	}
	fmt.Fprintf(os.Stdout, "Response from `ConversionApi.GetPriceConversion`: %v\n", resp)
	return resp.Price
}
